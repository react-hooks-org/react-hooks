(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{269:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),u=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,d=p["".concat(i,".").concat(b)]||p[b]||m[b]||s;return t?o.a.createElement(d,l(l({ref:n},c),{},{components:t})):o.a.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=b;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=t[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},63:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return a})),t.d(n,"default",(function(){return u}));var r=t(2),o=t(6),s=(t(0),t(269)),i={id:"use-fullscreen",title:"use-fullscreen",sidebar_label:"use-fullscreen",original_id:"use-fullscreen"},l={unversionedId:"use-fullscreen",id:"version-v3.7.0/use-fullscreen",isDocsHomePage:!1,title:"use-fullscreen",description:"@rooks/use-fullscreen",source:"@site/versioned_docs/version-v3.7.0/use-fullscreen.md",slug:"/use-fullscreen",permalink:"/docs/use-fullscreen",version:"v3.7.0",sidebar_label:"use-fullscreen"},a=[{value:"Use full screen api for making beautiful and emersive experinces.",id:"use-full-screen-api-for-making-beautiful-and-emersive-experinces",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Importing the hook",id:"importing-the-hook",children:[]},{value:"Usage",id:"usage",children:[]}],c={rightToc:a};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"rooksuse-fullscreen"},"@rooks/use-fullscreen"),Object(s.b)("h3",{id:"use-full-screen-api-for-making-beautiful-and-emersive-experinces"},"Use full screen api for making beautiful and emersive experinces."),Object(s.b)("p",null,Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"https://travis-ci.org/imbhargav5/rooks"}),Object(s.b)("img",Object(r.a)({parentName:"a"},{src:"https://travis-ci.org/imbhargav5/rooks.svg?branch=master",alt:"Build Status"})))," ",Object(s.b)("img",Object(r.a)({parentName:"p"},{src:"https://img.shields.io/npm/v/@rooks/use-fullscreen/latest.svg",alt:null}))," ",Object(s.b)("img",Object(r.a)({parentName:"p"},{src:"https://img.shields.io/npm/l/@rooks/use-fullscreen.svg",alt:null}))," ",Object(s.b)("img",Object(r.a)({parentName:"p"},{src:"https://img.shields.io/bundlephobia/min/@rooks/use-fullscreen.svg",alt:null}))," ",Object(s.b)("img",Object(r.a)({parentName:"p"},{src:"https://img.shields.io/david/imbhargav5/rooks.svg?path=packages%2Ffullscreen",alt:null}))),Object(s.b)("a",{href:"https://spectrum.chat/rooks"},Object(s.b)("img",{src:"https://withspectrum.github.io/badge/badge.svg",alt:"Join the community on Spectrum"})),Object(s.b)("h3",{id:"installation"},"Installation"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"npm install --save @rooks/use-fullscreen\n")),Object(s.b)("h3",{id:"importing-the-hook"},"Importing the hook"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'import useFullscreen from "@rooks/use-fullscreen"\n')),Object(s.b)("h3",{id:"usage"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),'import React, { useState, useRef } from "react";\nimport ReactDOM from "react-dom";\nimport { useFullscreen } from "rooks";\n\nconst styles = {\n  html: {\n    fontFamily: "\'Helvetica Neue\', Helvetica, Arial, sans-serif",\n    padding: "30px 10px 0 0",\n    fontSize: "20px",\n    lineHeight: "1.4",\n    color: "#737373",\n    background: "#f0f0f0",\n    WebkitFontSmoothing: "antialiased"\n  },\n  hr: {\n    border: "none",\n    borderTop: "1px solid #e6e6e6",\n    margin: "20px 0"\n  },\n  a: {\n    color: "#666"\n  },\n  h1: {\n    margin: "0",\n    fontSize: "40px",\n    textAlign: "center"\n  },\n  ul: {\n    padding: "0 0 0 40px",\n    margin: "1em 0",\n    padding: "0",\n    margin: "40px 0 0 0",\n    listStyle: "none"\n  },\n  button: {\n    fontSize: "13px"\n  },\n  container: {\n    width: "500px",\n    padding: "30px 20px",\n    margin: "0 auto 50px auto",\n    background: "#fcfcfc",\n    textAlign: "center",\n    border: "1px solid #b3b3b3",\n    borderRadius: "4px",\n    boxShadow: "0 1px 10px #a7a7a7, inset 0 1px 0 #fff"\n  },\n  demo_img: {\n    cursor: "pointer"\n  },\n  header_p: {\n    fontSize: "17px"\n  }\n};\n\nfunction Demo() {\n  const container = useRef();\n  const {\n    isEnabled,\n    toggle,\n    onChange,\n    onError,\n    request,\n    exit,\n    isFullscreen,\n    element\n  } = useFullscreen();\n  const [changeCount, setChangeCount] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n\n  onChange(() => {\n    setChangeCount(changeCount + 1);\n  });\n  onError(() => {\n    setErrorCount(errorCount + 1);\n  });\n\n  return (\n    <div id="document" style={styles.html}>\n      <section ref={container} id="container" style={styles.container}>\n        <header>\n          <h1 styles={styles.h1}>useFullscreen</h1>\n          <p style={styles.header_p}>\n            Simple react hook for cross-browser usage of the JavaScript{" "}\n            <a\n              style={styles.a}\n              href="https://developer.mozilla.org/en/DOM/Using_full-screen_mode"\n            >\n              Fullscreen API\n            </a>\n            , which lets you bring the page or any element into fullscreen.\n            Smoothens out the browser implementation differences, so you don\'t\n            have too.\n          </p>\n        </header>\n        <hr style={styles.hr} />\n        <section>\n          <p>Try out the Fullscreen API</p>\n          <button\n            style={styles.button}\n            onClick={() => {\n              request(container.current);\n            }}\n          >\n            Request\n          </button>\n          <button\n            style={styles.button}\n            onClick={() => {\n              exit();\n            }}\n          >\n            Exit\n          </button>\n          <button\n            style={styles.button}\n            onClick={() => {\n              toggle();\n            }}\n          >\n            Toggle\n          </button>\n          <button style={styles.button} onClick={() => request()}>\n            Request document\n          </button>\n        </section>\n        <section>\n          <ul style={styles.ul}>\n            <li id="supported">\n              Supported/allowed: {JSON.stringify(isEnabled)}\n            </li>\n            <li id="status">Is fullscreen: {JSON.stringify(isFullscreen)}</li>\n            <li>\n              Changed {changeCount} {changeCount !== 1 ? "times" : "time"}\n            </li>\n            <li>\n              {errorCount} {errorCount !== 1 ? "errors" : "error"}\n            </li>\n            <li id="element">\n              Element:{" "}\n              {element\n                ? `${element.tagName.toLowerCase()} ${element.id}`\n                : "null"}\n            </li>\n          </ul>\n        </section>\n        <input placeholder="Keyboard test" />\n        <hr style={styles.hr} />\n        <section>\n          <p>Click the image to make it fullscreen</p>\n          <img\n            id="demo-img"\n            src="https://sindresorhus.com/unicorn"\n            width="500"\n            style={styles.demo_img}\n            onClick={e => {\n              toggle(e.target);\n            }}\n          />\n        </section>\n      </section>\n    </div>\n  );\n}\n\n\nrender(<Demo/>)\n')))}u.isMDXComponent=!0}}]);